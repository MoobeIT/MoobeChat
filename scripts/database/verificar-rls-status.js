require('dotenv').config({ path: '.env.local' });
const { createClient } = require('@supabase/supabase-js');

const supabaseUrl = process.env.SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå Vari√°veis SUPABASE_URL e SUPABASE_ANON_KEY s√£o obrigat√≥rias');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

async function verificarRLSStatus() {
  console.log('üîç Verificando status do RLS no Supabase...');
  console.log(`URL: ${supabaseUrl}`);
  console.log('');

  const tabelas = [
    'users', 'workspaces', 'workspace_users', 'platforms', 
    'contacts', 'conversations', 'messages', 
    'kanban_boards', 'kanban_columns', 'kanban_cards'
  ];

  try {
    // Verificar se RLS est√° habilitado para cada tabela
    console.log('üìã Verificando se RLS est√° habilitado...');
    
    const { data: rlsStatus, error: rlsError } = await supabase
      .rpc('check_rls_status', {});
    
    if (rlsError) {
      console.log('‚ö†Ô∏è  N√£o foi poss√≠vel verificar RLS via RPC, tentando m√©todo alternativo...');
      
      // M√©todo alternativo: tentar acessar as tabelas diretamente
      for (const tabela of tabelas) {
        try {
          const { data, error } = await supabase
            .from(tabela)
            .select('*')
            .limit(1);
          
          if (error) {
            if (error.code === '42501') {
              console.log(`‚ùå Tabela "${tabela}": RLS n√£o configurado (permission denied)`);
            } else {
              console.log(`‚úÖ Tabela "${tabela}": RLS configurado (acesso permitido)`);
            }
          } else {
            console.log(`‚úÖ Tabela "${tabela}": RLS configurado e funcionando`);
          }
        } catch (err) {
          console.log(`‚ùå Tabela "${tabela}": Erro - ${err.message}`);
        }
      }
    }

    // Verificar pol√≠ticas espec√≠ficas
    console.log('\nüîê Verificando pol√≠ticas RLS...');
    
    const { data: policies, error: policiesError } = await supabase
      .from('pg_policies')
      .select('*');
    
    if (policiesError) {
      console.log('‚ö†Ô∏è  N√£o foi poss√≠vel acessar pg_policies diretamente');
    } else {
      console.log(`‚úÖ Encontradas ${policies?.length || 0} pol√≠ticas RLS`);
    }

    // Teste de inser√ß√£o simples
    console.log('\nüß™ Testando inser√ß√£o de dados...');
    
    const { data: testUser, error: testError } = await supabase
      .from('users')
      .insert({
        id: 'test-user-' + Date.now(),
        email: 'test@example.com',
        name: 'Test User'
      })
      .select();
    
    if (testError) {
      if (testError.code === '42501') {
        console.log('‚ùå Teste de inser√ß√£o falhou: RLS n√£o permite inser√ß√£o');
      } else {
        console.log(`‚ö†Ô∏è  Teste de inser√ß√£o falhou: ${testError.message}`);
      }
    } else {
      console.log('‚úÖ Teste de inser√ß√£o bem-sucedido!');
      
      // Limpar dados de teste
      await supabase
        .from('users')
        .delete()
        .eq('id', testUser[0].id);
      console.log('üßπ Dados de teste removidos');
    }

  } catch (error) {
    console.error('‚ùå Erro durante verifica√ß√£o:', error.message);
  }

  console.log('\nüéØ VERIFICA√á√ÉO DE RLS CONCLU√çDA!');
}

verificarRLSStatus();