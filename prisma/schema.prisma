// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Modelo de Usuário (Multi-tenant)
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  image     String?
  role      UserRole @default(USER)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relacionamentos
  accounts    Account[]
  sessions    Session[]
  workspaces  WorkspaceUser[]
  
  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now()) @map("created_at")

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Workspace (Multi-tenant)
model Workspace {
  id          String   @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relacionamentos
  users       WorkspaceUser[]
  platforms   Platform[]
  conversations Conversation[]
  kanbanBoards KanbanBoard[]
  contacts    Contact[]

  @@map("workspaces")
}

model WorkspaceUser {
  id          String        @id @default(cuid())
  userId      String        @map("user_id")
  workspaceId String        @map("workspace_id")
  role        WorkspaceRole @default(MEMBER)
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@unique([userId, workspaceId])
  @@map("workspace_users")
}

// Plataformas de Comunicação
model Platform {
  id          String       @id @default(cuid())
  workspaceId String       @map("workspace_id")
  type        PlatformType
  name        String
  config      Json @default("{}")
  isActive    Boolean      @default(true) @map("is_active")
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")

  workspace     Workspace      @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  conversations Conversation[]
  contacts      Contact[]

  @@map("platforms")
}

// Conversas
model Conversation {
  id            String             @id @default(cuid())
  workspaceId   String             @map("workspace_id")
  platformId    String             @map("platform_id")
  externalId    String             @map("external_id")
  customerName  String?            @map("customer_name")
  customerPhone String?            @map("customer_phone")
  customerEmail String?            @map("customer_email")
  status        ConversationStatus @default(OPEN)
  priority      Priority           @default(MEDIUM)
  assignedTo    String?            @map("assigned_to")
  tags          String[]           @default([])
  createdAt     DateTime           @default(now()) @map("created_at")
  updatedAt     DateTime           @updatedAt @map("updated_at")
  lastMessageAt DateTime?          @map("last_message_at")

  workspace     Workspace      @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  platform      Platform       @relation(fields: [platformId], references: [id], onDelete: Cascade)
  messages      Message[]
  kanbanCard    KanbanCard?

  @@unique([platformId, externalId])
  @@map("conversations")
}

// Mensagens
model Message {
  id             String      @id @default(cuid())
  conversationId String      @map("conversation_id")
  externalId     String?     @map("external_id")
  content        String
  messageType    MessageType @default(TEXT) @map("message_type")
  direction      Direction
  senderName     String?     @map("sender_name")
  metadata       Json?
  createdAt      DateTime    @default(now()) @map("created_at")
  updatedAt      DateTime    @updatedAt @map("updated_at")

  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@map("messages")
}

// Sistema Kanban
model KanbanBoard {
  id          String   @id @default(cuid())
  workspaceId String   @map("workspace_id")
  name        String
  description String?
  isDefault   Boolean  @default(false) @map("is_default")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  workspace Workspace     @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  columns   KanbanColumn[]

  @@map("kanban_boards")
}

model KanbanColumn {
  id        String   @id @default(cuid())
  boardId   String   @map("board_id")
  name      String
  color     String?
  position  Int
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  board KanbanBoard @relation(fields: [boardId], references: [id], onDelete: Cascade)
  cards KanbanCard[]

  @@map("kanban_columns")
}

model KanbanCard {
  id             String   @id @default(cuid())
  columnId       String   @map("column_id")
  conversationId String   @unique @map("conversation_id")
  position       Int
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  column       KanbanColumn @relation(fields: [columnId], references: [id], onDelete: Cascade)
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@map("kanban_cards")
}

// Contatos
model Contact {
  id          String   @id @default(cuid())
  workspaceId String   @map("workspace_id")
  platformId  String   @map("platform_id")
  name        String
  phone       String
  email       String?
  notes       String?
  tags        String[] @default([])
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  platform  Platform  @relation(fields: [platformId], references: [id], onDelete: Cascade)

  @@unique([workspaceId, platformId, phone])
  @@map("contacts")
}

// Enums
enum UserRole {
  USER
  ADMIN
}

enum WorkspaceRole {
  OWNER
  ADMIN
  MEMBER
}

enum PlatformType {
  WHATSAPP
  INSTAGRAM
  FACEBOOK
  TELEGRAM
  EMAIL
}

enum ConversationStatus {
  OPEN
  IN_PROGRESS
  WAITING
  RESOLVED
  CLOSED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum MessageType {
  TEXT
  IMAGE
  VIDEO
  AUDIO
  DOCUMENT
  STICKER
  LOCATION
}

enum Direction {
  INCOMING
  OUTGOING
} 